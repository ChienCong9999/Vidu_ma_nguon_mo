import sys
import cv2
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QVBoxLayout, QPushButton, QFileDialog
from PyQt5.QtGui import QPixmap, QImage, QImageReader

class SmoothFilterApp(QWidget):
    def __init__(self):
        super().__init__()

        self.image_path = None
        self.init_ui()

    def init_ui(self):
        # Widgets
        self.image_label = QLabel()
        self.load_button = QPushButton("Load Image")
        self.smooth_button = QPushButton("Smooth Image")

        # Layout
        layout = QVBoxLayout()
        layout.addWidget(self.load_button)
        layout.addWidget(self.image_label)
        layout.addWidget(self.smooth_button)

        self.setLayout(layout)

        # Connect signals
        self.load_button.clicked.connect(self.load_image)
        self.smooth_button.clicked.connect(self.smooth_image)

    def load_image(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_dialog = QFileDialog()
        file_dialog.setNameFilter("Images (*.png *.jpg *.bmp)")
        file_dialog.setOptions(options)

        if file_dialog.exec_() == QFileDialog.Accepted:
            self.image_path = file_dialog.selectedFiles()[0]
            pixmap = QPixmap(self.image_path)
            self.image_label.setPixmap(pixmap)

    def smooth_image(self):
        if self.image_path is not None:
            original_image = cv2.imread(self.image_path)
            smoothed_image = cv2.GaussianBlur(original_image, (5, 5), 0)

            cv2.imshow("Original Image", original_image)
            cv2.imshow("Smoothed Image", smoothed_image)
            cv2.waitKey(0)
            cv2.destroyAllWindows()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = SmoothFilterApp()
    window.setWindowTitle("Smooth Filter App")
    window.setGeometry(100, 100, 800, 600)
    window.show()
    sys.exit(app.exec_())
